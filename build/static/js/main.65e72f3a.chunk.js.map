{"version":3,"sources":["Components/InventoryComponent/service.js","Components/InventoryComponent/index.jsx","Components/LoginComponent/service.js","Components/LoginComponent/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["addBook","payload","a","fetch","method","body","JSON","stringify","headers","localStorage","getItem","responseStream","json","response","error","data","deleteBook","bookId","getBooks","searchBooks","bookName","encodeURIComponent","items","Inventory","useState","books","setBooks","results","setResults","searchBook","setSearchBook","open","setOpen","useEffect","fetchBooks","fetchedBooks","findBooks","trim","bookResults","addSearchBook","book","saveBook","updatedBook","booksCopy","removeBook","splice","_id","Grid","Column","width","Header","icon","Table","celled","striped","Row","HeaderCell","Body","map","index","Cell","book_name","author","toString","quantity","Button","onClick","e","Input","focus","placeholder","onChange","target","value","result","title","volumeInfo","authors","find","toLowerCase","google_id","id","Modal","basic","onClose","onOpen","size","Icon","name","Content","Number","type","Actions","color","inverted","loginService","setItem","info","signUpService","usernameService","username","Login","history","useHistory","setUsername","password","setPassword","newUsername","setNewUsername","newPassword","setNewPassword","firstname","setFirstname","lastname","setLastname","signupError","setSignupError","loginError","setLoginError","handleSignup","event","preventDefault","first_name","last_name","catch","handleLogin","push","verifyUsername","Form","className","onSubmit","as","Message","content","inline","label","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65e72f3a.chunk.js","sourcesContent":["export const addBook = async (payload) => {\r\n    try {\r\n        const responseStream = await fetch(`/addBook`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(payload),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\n\r\nexport const deleteBook = async ({ bookId }) => {\r\n    try {\r\n        const responseStream = await fetch(`/deleteBook/${bookId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const getBooks = async () => {\r\n    try {\r\n        const responseStream = await fetch(`/getBooks`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const searchBooks = async ({ bookName }) => {\r\n    try {\r\n        const responseStream = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(bookName)}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.items;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Menu, Button, Grid, Input, Header, Icon, Modal } from 'semantic-ui-react';\r\nimport { getBooks, searchBooks, addBook, deleteBook } from \"./service\";\r\nimport styles from './styles.css';\r\n\r\nexport default function Inventory() {\r\n    const [books, setBooks] = useState([]);\r\n    const [results, setResults] = useState([]);\r\n    const [searchBook, setSearchBook] = useState(\"\");\r\n    const [open, setOpen] = useState(null)\r\n\r\n    useEffect(() => {\r\n        fetchBooks()\r\n    }, [])\r\n\r\n    const fetchBooks = async () => {\r\n        const fetchedBooks = await getBooks();\r\n        setBooks(fetchedBooks);\r\n    }\r\n    const findBooks = async () => {\r\n        if (searchBook?.trim()) {\r\n            const bookResults = await searchBooks({ bookName: searchBook?.trim() });\r\n            setResults(bookResults);\r\n        } else {\r\n            setResults([]);\r\n        }\r\n    }\r\n\r\n    const addSearchBook = async (book) => {\r\n        setBooks([...books, book]);\r\n        await saveBook(book);\r\n    }\r\n\r\n    const checkTitle = (title) => {\r\n        return !books.find(book => book.book_name?.trim().toLowerCase() == title?.trim().toLowerCase());\r\n    }\r\n\r\n    const updateQuantity = e => {\r\n        const booksCopy = [...books];\r\n        booksCopy[open].quantity = e.target.value;\r\n        setBooks(booksCopy)\r\n    }\r\n\r\n    const saveBook = async book => {\r\n        const updatedBook = await addBook(book);\r\n        const booksCopy = [...books];\r\n        booksCopy[open] = updatedBook;\r\n        setBooks(booksCopy)\r\n        setOpen(null)\r\n    }\r\n\r\n    const removeBook = async () => {\r\n        const booksCopy = [...books];\r\n        booksCopy.splice(open, 1);\r\n        setBooks(booksCopy);\r\n        setOpen(null)\r\n        await deleteBook({ bookId: books[open]?._id });\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Header icon>\r\n                    Inventory Books\r\n                </Header>\r\n                <Table celled striped>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Book Name</Table.HeaderCell>\r\n                            <Table.HeaderCell>Author</Table.HeaderCell>\r\n                            <Table.HeaderCell>Quantity</Table.HeaderCell>\r\n                            <Table.HeaderCell>edit</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {books.map((book, index) =>\r\n                        (<Table.Row key={book._id}>\r\n                            <Table.Cell>{book.book_name}</Table.Cell>\r\n                            <Table.Cell>{book.author?.toString()}</Table.Cell>\r\n                            <Table.Cell>{book.quantity || \"01\"}</Table.Cell>\r\n                            <Table.Cell><Button onClick={e => setOpen(index)}>edit</Button></Table.Cell>\r\n                        </Table.Row>),\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <Input focus placeholder='Search...' onChange={e => setSearchBook(e.target.value)} />\r\n                <Button onClick={findBooks}>Search</Button>\r\n                <Table celled striped>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Book Name</Table.HeaderCell>\r\n                            <Table.HeaderCell>Author</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {results.map((result, index) =>\r\n                        (<Table.Row key={index}>\r\n                            <Table.Cell>{result.volumeInfo?.title}</Table.Cell>\r\n                            <Table.Cell>{result.volumeInfo?.authors?.toString()}</Table.Cell>\r\n                            <Table.Cell>{checkTitle(result.volumeInfo?.title) ?\r\n                                < Button onClick={(e) => addSearchBook({\r\n                                    book_name: result.volumeInfo?.title, author: result.volumeInfo?.authors, google_id: result.id\r\n                                })}>+</Button> : \"Present\"}\r\n                            </Table.Cell>\r\n                        </Table.Row>),\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n            <Modal\r\n                basic\r\n                onClose={() => setOpen(null)}\r\n                onOpen={() => setOpen(true)}\r\n                open={open !== null}\r\n                size='small'\r\n            >\r\n                <Header icon>\r\n                    <Icon name='archive' />\r\n                     Edit Book in the Inventory\r\n                </Header>\r\n                <Modal.Content>\r\n                    <p>\r\n                        Book Name: {books[open]?.book_name}\r\n                    </p>\r\n                    <p>\r\n                        Book Authors: {books[open]?.author?.toString()}\r\n                    </p>\r\n                    <p>\r\n                        Google Id: {books[open]?.google_id}\r\n                    </p>\r\n                    <p>\r\n                        Quantity:\r\n                        <Input value={Number(books[open]?.quantity) || 1} type=\"number\" onChange={updateQuantity} />\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => setOpen(null)}>\r\n                        <Icon name='remove' /> Cancel\r\n                    </Button>\r\n                    <Button basic color='blue' inverted onClick={removeBook}>\r\n                        <Icon name='remove' /> Delete\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={() => saveBook(books[open])}>\r\n                        <Icon name='checkmark' /> Save\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </Grid >\r\n    );\r\n}","export const loginService = async (payload) => {\r\n    try {\r\n        const responseStream = await fetch(`/login`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(payload),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        localStorage.setItem(\"token\", response.info);\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const signUpService = async (payload) => {\r\n    try {\r\n        const responseStream = await fetch(`/newUser`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(payload),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const usernameService = async ({ username }) => {\r\n    try {\r\n        const responseStream = await fetch(`/checkUsername/${username}`, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const response = await responseStream.json();\r\n        if (response.error) throw response.error;\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport { Grid, Form, Header, Message } from 'semantic-ui-react';\r\nimport styles from './styles.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { loginService, signUpService, usernameService } from \"./service\";\r\n\r\nexport default function Login() {\r\n  const history = useHistory();\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newUsername, setNewUsername] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [firstname, setFirstname] = useState(\"\");\r\n  const [lastname, setLastname] = useState(\"\");\r\n  const [signupError, setSignupError] = useState(null);\r\n  const [loginError, setLoginError] = useState(null);\r\n\r\n  const handleSignup = async (event) => {\r\n    event.preventDefault();\r\n    if (!newUsername || !newPassword) {\r\n      return setSignupError(\"Invalid Username or Password\");\r\n    }\r\n    await signUpService({\r\n      username: newUsername, password: newPassword,\r\n      first_name: firstname, last_name: lastname\r\n    }).catch(e => { setSignupError(e) });\r\n  }\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    if (!username || !password) {\r\n      return setLoginError(\"Invalid Username or Password\");\r\n    }\r\n    try {\r\n      await loginService({ username, password });\r\n      history.push('/home');\r\n    } catch (e) {\r\n      setLoginError(e);\r\n    }\r\n  }\r\n\r\n  const verifyUsername = async (e) => {\r\n    e.preventDefault();\r\n    await usernameService({ username: newUsername }).catch(e => {\r\n      setNewUsername(\"\");\r\n      setSignupError(\"Username Taken\");\r\n    })\r\n  }\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={8}>\r\n        <Form className={\"login-form\"} error={loginError} onSubmit={handleLogin}>\r\n          <Header as=\"h1\">Login</Header>\r\n          {loginError && <Message\r\n            error={loginError}\r\n            content={loginError}\r\n          />}\r\n          <Form.Input\r\n            inline\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            inline\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <Form.Button type=\"submit\">Go!</Form.Button>\r\n        </Form>\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width={6}>\r\n        <Form className={\"login-form\"} error={signupError} onSubmit={handleSignup}>\r\n          <Header as=\"h1\">SignUp</Header>\r\n          {signupError && <Message\r\n            error={signupError}\r\n            content={signupError}\r\n          />}\r\n          <Form.Input\r\n            inline\r\n            label=\"First Name\"\r\n            name=\"firstname\"\r\n            onChange={(e) => setFirstname(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            inline\r\n            label=\"Last Name\"\r\n            name=\"lastname\"\r\n            onChange={(e) => setLastname(e.target.value)}\r\n          />\r\n          <Form.Input\r\n            inline\r\n            label=\"Username\"\r\n            name=\"newusername\"\r\n            onChange={(e) => setNewUsername(e.target.value)}\r\n          />\r\n          <Form.Button onClick={verifyUsername}>Check Username</Form.Button>\r\n          <Form.Input\r\n            inline\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            name=\"newpassword\"\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n          />\r\n          <Form.Button type=\"submit\">Go!</Form.Button>\r\n        </Form>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}","import { MemoryRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Inventory from './Components/InventoryComponent';\r\nimport Login from './Components/LoginComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-routes\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Login} />\r\n          <Route path=\"/home\" exact component={Inventory} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}